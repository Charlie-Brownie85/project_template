// It generates all the grid column classes for given parameters.
// Args:
// @param {number}  $num: Number of total columns of the grid.
// @param {number}  $columns-spacing: amount of in-between columns separation (either px or %)
// @param {string}  $col-prefix: prefix for every 'col-' class name.
// @param {string}  $col-name: sufix for every 'col-' class name.
@mixin generate-col-classes($num, $columns-spacing, $col-prefix, $col-name) {
  $col-prefix: '.' + $col-prefix + '-';
  $columns-spacing-compensation: $columns-spacing * .5 * -1;
  $half-columns-spacing: $columns-spacing * .5;

  $selector: $col-prefix + $col-name + ',';

  @for $i from 1 through $num {
      $selector: $selector + $col-prefix + $col-name + '-' + $i + ', ' + $col-prefix + $col-name + '--off-' + $i + ', ';
  }

  @if $num==12 {
      $selector: $selector + $col-prefix + $col-name + '-2-4, ' + $col-prefix + $col-name + '--off-2-4' + ', ';
  }

  #{$selector} {
      box-sizing: border-box;
      flex-grow: 0;
      flex-shrink: 0;
      padding-right: $half-columns-spacing;
      padding-left: $half-columns-spacing;
  }

  // Fluid width col. It will grow as much as it can, taking all available space within the row.
  #{$col-prefix}#{$col-name} {
      flex-grow: 1;
      flex-basis: 0;
      max-width: 100%;

      // Column width will fit to content
      &--auto {
          flex-basis: auto;
      }

      // In order to display 5 items per row in a 12 columns system you need items of 2.4 columns width each.
      @if $num==12 {

          &-2-4 {
              flex-basis: 20%;
              max-width: 20%;
          }

          // 5 items per row with offset
          &--off-2-4 {
              margin-left: 20%;
          }
      }
  }

  @for $i from 1 through $num {
      #{$col-prefix}#{$col-name}-#{$i} {
          flex-basis: 100% / $num * $i;
          max-width: 100% / $num * $i;
      }

      #{$col-prefix}#{$col-name}--off-#{$i} {
          margin-left: 100% / $num * $i;
      }
  }
}
